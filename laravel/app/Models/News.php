<?php namespace App\Models;


use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class News extends Model {
	
	protected $fillable = ['title', 'body'];
	
	protected function boot() {
		parent::boot(); // TODO: Change the autogenerated stub
		
		/**
		 * Listen creating event
		 * Defining there are uuid & timestamps columns
		 */
		$this->creating(function ($model) {
			$date = now();
			$uuid = Str::uuid();
			
			$model->uuid = $uuid;
			$model->slug = "{$date->timestamp}-{$model->title}";
			$model->created_at = $date;
			$model->updated_at = $date;
		});
	}
	
	/**
	 * Overriding slug column setter
	 *
	 * @param string $value
	 */
	protected function setSlugAttribute(string $value) {		
		$this->attributes['slug'] = Str::slug($value);
	}
	
	/**
	 * @return \Illuminate\Support\Collection
	 */
	public function tags() {
		$tagUuids = DB::table('news_tags')
			->where('news_uuid', $this->uuid)
			->select('tag_uuid')
			->get()
			->pluck('tag_uuid')
			->all();
		
		return Tag::query()
			->whereIn('uuid', $tagUuids)
			->get();
	}
	
	/**
	 * Attaching tags
	 * 
	 * @param array $uuids
	 * @return bool
	 */
	public function attachTags(array $uuids):bool {
		
		DB::transaction(function () use ($uuids) {
			$this->detachTags();
			
			foreach ($uuids as $uuid) {
				$values = [
					'news_uuid' => $this->uuid,
					'tag_uuid' => $uuid,
				];
				
				DB::table('news_tags')
					->updateOrInsert($values, $values);
			}
		});
		
		return true;
		
	}
	
	/**
	 * Detaching tags by uuid's
	 * 
	 * @return bool
	 */
	public function detachTags():bool {		
		$result = DB::table('news_tags')
			->where('news_uuid', $this->uuid)
			->delete();
		
		return $result ? true : false;
	}

}